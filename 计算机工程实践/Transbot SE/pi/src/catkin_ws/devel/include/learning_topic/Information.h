// Generated by gencpp from file learning_topic/Information.msg
// DO NOT EDIT!


#ifndef LEARNING_TOPIC_MESSAGE_INFORMATION_H
#define LEARNING_TOPIC_MESSAGE_INFORMATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learning_topic
{
template <class ContainerAllocator>
struct Information_
{
  typedef Information_<ContainerAllocator> Type;

  Information_()
    : company()
    , city()  {
    }
  Information_(const ContainerAllocator& _alloc)
    : company(_alloc)
    , city(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _company_type;
  _company_type company;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _city_type;
  _city_type city;





  typedef boost::shared_ptr< ::learning_topic::Information_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_topic::Information_<ContainerAllocator> const> ConstPtr;

}; // struct Information_

typedef ::learning_topic::Information_<std::allocator<void> > Information;

typedef boost::shared_ptr< ::learning_topic::Information > InformationPtr;
typedef boost::shared_ptr< ::learning_topic::Information const> InformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learning_topic::Information_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learning_topic::Information_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learning_topic::Information_<ContainerAllocator1> & lhs, const ::learning_topic::Information_<ContainerAllocator2> & rhs)
{
  return lhs.company == rhs.company &&
    lhs.city == rhs.city;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learning_topic::Information_<ContainerAllocator1> & lhs, const ::learning_topic::Information_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learning_topic

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::learning_topic::Information_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_topic::Information_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_topic::Information_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_topic::Information_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_topic::Information_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_topic::Information_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learning_topic::Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f9332e7eae53dbcb74dc13ad7572af4";
  }

  static const char* value(const ::learning_topic::Information_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f9332e7eae53dbcULL;
  static const uint64_t static_value2 = 0xb74dc13ad7572af4ULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_topic::Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learning_topic/Information";
  }

  static const char* value(const ::learning_topic::Information_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learning_topic::Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string company\n"
"string city  \n"
;
  }

  static const char* value(const ::learning_topic::Information_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learning_topic::Information_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.company);
      stream.next(m.city);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Information_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learning_topic::Information_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learning_topic::Information_<ContainerAllocator>& v)
  {
    s << indent << "company: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.company);
    s << indent << "city: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.city);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARNING_TOPIC_MESSAGE_INFORMATION_H
