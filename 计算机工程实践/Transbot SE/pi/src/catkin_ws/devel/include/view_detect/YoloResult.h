// Generated by gencpp from file view_detect/YoloResult.msg
// DO NOT EDIT!


#ifndef VIEW_DETECT_MESSAGE_YOLORESULT_H
#define VIEW_DETECT_MESSAGE_YOLORESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace view_detect
{
template <class ContainerAllocator>
struct YoloResult_
{
  typedef YoloResult_<ContainerAllocator> Type;

  YoloResult_()
    : image_id()
    , class_names()
    , counts()  {
    }
  YoloResult_(const ContainerAllocator& _alloc)
    : image_id(_alloc)
    , class_names(_alloc)
    , counts(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _image_id_type;
  _image_id_type image_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _class_names_type;
  _class_names_type class_names;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _counts_type;
  _counts_type counts;





  typedef boost::shared_ptr< ::view_detect::YoloResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::view_detect::YoloResult_<ContainerAllocator> const> ConstPtr;

}; // struct YoloResult_

typedef ::view_detect::YoloResult_<std::allocator<void> > YoloResult;

typedef boost::shared_ptr< ::view_detect::YoloResult > YoloResultPtr;
typedef boost::shared_ptr< ::view_detect::YoloResult const> YoloResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::view_detect::YoloResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::view_detect::YoloResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::view_detect::YoloResult_<ContainerAllocator1> & lhs, const ::view_detect::YoloResult_<ContainerAllocator2> & rhs)
{
  return lhs.image_id == rhs.image_id &&
    lhs.class_names == rhs.class_names &&
    lhs.counts == rhs.counts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::view_detect::YoloResult_<ContainerAllocator1> & lhs, const ::view_detect::YoloResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace view_detect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::view_detect::YoloResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::view_detect::YoloResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::view_detect::YoloResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::view_detect::YoloResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::view_detect::YoloResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::view_detect::YoloResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::view_detect::YoloResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52917fd0d63c30fa5cbba61ad8a19792";
  }

  static const char* value(const ::view_detect::YoloResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52917fd0d63c30faULL;
  static const uint64_t static_value2 = 0x5cbba61ad8a19792ULL;
};

template<class ContainerAllocator>
struct DataType< ::view_detect::YoloResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "view_detect/YoloResult";
  }

  static const char* value(const ::view_detect::YoloResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::view_detect::YoloResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# YOLO检测结果消息\n"
"string image_id        # 图像ID或文件名\n"
"string[] class_names   # 检测到的类别名称\n"
"int32[] counts         # 每个类别的数量 \n"
;
  }

  static const char* value(const ::view_detect::YoloResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::view_detect::YoloResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.image_id);
      stream.next(m.class_names);
      stream.next(m.counts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YoloResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::view_detect::YoloResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::view_detect::YoloResult_<ContainerAllocator>& v)
  {
    s << indent << "image_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.image_id);
    s << indent << "class_names[]" << std::endl;
    for (size_t i = 0; i < v.class_names.size(); ++i)
    {
      s << indent << "  class_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_names[i]);
    }
    s << indent << "counts[]" << std::endl;
    for (size_t i = 0; i < v.counts.size(); ++i)
    {
      s << indent << "  counts[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.counts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VIEW_DETECT_MESSAGE_YOLORESULT_H
